import { Modal, Button, Form, Row, Col, Tab, Tabs } from "react-bootstrap";
import {
  FaUser,
  FaEnvelope,
  FaPhone,
  FaMapMarkerAlt,
  FaEdit,
  FaKey,
  FaHistory,
  FaCog,
  FaCamera,
  FaBell,
  FaLock,
  FaCalendarAlt,
  FaUserTie,
  FaIdCard,
  FaGlobe,
  FaEye,
  FaEyeSlash,
  FaClock,
  FaUserShield,
  FaCheck,
  FaExclamationTriangle,
  FaSave,
} from "react-icons/fa";
import "../../styles/admin/profile.css";

const adminProfile = {
  name: "Nguy·ªÖn VƒÉn Admin",
  dob: "1990-05-15",
  gender: "Nam",
  position: "Qu·∫£n tr·ªã vi√™n",
  email: "admin@schoolhealth.com",
  phone: "0987654321",
  address: "123 ƒê∆∞·ªùng ABC, Qu·∫≠n XYZ, TP.HCM",
  avatar: "/uploads/default.jpg",
  joinDate: "2023-01-15",
  department: "Ph√≤ng Y t·∫ø",
  employeeId: "ADM001",
  lastLogin: "2024-01-15 14:30",
  language: "Ti·∫øng Vi·ªát",
  timezone: "Asia/Ho_Chi_Minh",
};

const recentActivities = [
  {
    id: 1,
    action: "C·∫≠p nh·∫≠t th√¥ng tin h·ªçc sinh",
    time: "2 gi·ªù tr∆∞·ªõc",
    icon: "üë§",
    type: "info",
  },
  {
    id: 2,
    action: "T·∫°o th√¥ng b√°o ti√™m ch·ªßng",
    time: "4 gi·ªù tr∆∞·ªõc",
    icon: "üíâ",
    type: "success",
  },
  {
    id: 3,
    action: "Ph√™ duy·ªát ƒë∆°n thu·ªëc",
    time: "1 ng√†y tr∆∞·ªõc",
    icon: "üíä",
    type: "warning",
  },
  {
    id: 4,
    action: "Xu·∫•t b√°o c√°o s·ª©c kh·ªèe",
    time: "2 ng√†y tr∆∞·ªõc",
    icon: "üìä",
    type: "info",
  },
  {
    id: 5,
    action: "C·∫≠p nh·∫≠t kho thu·ªëc",
    time: "3 ng√†y tr∆∞·ªõc",
    icon: "üè•",
    type: "success",
  },
];
import React, { useState, useEffect, useRef } from "react";
import { Link, useParams } from "react-router-dom";
import axios from "axios";
import axiosInstance from "../../api/axiosInstance";
import { uploadAvatar } from "../../api/parent/ProfileApi";
import { useAvatar } from "../../context/AvatarContext";
import { toast } from "react-toastify";

const Profile = () => {
  const { updateAvatarVersion } = useAvatar();
  const fileInputRef = useRef(null);
  const [showEditModal, setShowEditModal] = useState(false);
  const [userInfo, setUserInfo] = useState(null);
  const userId = localStorage.getItem("userId");
  const [activeTab, setActiveTab] = useState("personal");
  const [showPasswordModal, setShowPasswordModal] = useState(false);
  const [showPasswordCurrent, setShowPasswordCurrent] = useState(false);
  const [showPasswordNew, setShowPasswordNew] = useState(false);
  const [showPasswordConfirm, setShowPasswordConfirm] = useState(false);

  const [formData, setFormData] = useState({});
  const [selectedImage, setSelectedImage] = useState(null);
  const [previewImage, setPreviewImage] = useState("");

  const [currentPassword, setCurrentPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmNewPassword, setConfirmNewPassword] = useState("");
  const [uploadImageFlag, setUploadImageFlag] = useState(false);

  useEffect(() => {
    if (showEditModal && userInfo) {
      setFormData({
        name: userInfo.name || "",
        email: userInfo.email || "",
        phone: userInfo.phone || "",
        address: userInfo.address || "",
      });
      setPreviewImage(userInfo.imageUrl || "");
      setSelectedImage(null);
    }
  }, [showEditModal, userInfo]);

  // const uploadAvatar = async (file) => {
  //   const formData = new FormData();
  //   formData.append("file", file);

  //   const response = await fetch("http://localhost:5182/api/Upload/image", {
  //     method: "POST",
  //     body: formData,
  //   });

  //   if (!response.ok) throw new Error("Upload ·∫£nh th·∫•t b·∫°i!");

  //   const data = await response.json();
  //   return data.fileName; // ho·∫∑c data.filePath n·∫øu backend y√™u c·∫ßu
  // };

  const handleChangeImage = (e) => {
    const file = e.target.files[0];
    if (file) {
      // console.log("dsad", selectedImage);
      // handleSaveProfile(file);
      setSelectedImage(file);
      setUploadImageFlag(true);
    }
  };

  useEffect(() => {
    if (uploadImageFlag) {
      handleSaveProfile();
      setUploadImageFlag(false);
    }
  }, [uploadImageFlag]);

  // const handleSaveProfile = async (file) => {
  //   try {
  //     let imageUrl = userInfo.imageUrl || "";

  //     // N·∫øu l√† URL ƒë·∫ßy ƒë·ªß, l·∫•y t√™n file ·∫£nh
  //     if (imageUrl.startsWith("http")) {
  //       // L·∫•y ph·∫ßn sau c√πng c·ªßa ƒë∆∞·ªùng d·∫´n
  //       imageUrl = imageUrl.split("/").pop();
  //     }

  //     if (selectedImage || file) {
  //       imageUrl = await uploadAvatar(selectedImage || file);
  //     }

  //     await axiosInstance.patch(`/User/profile/${userId}`, {
  //       ...formData,
  //       imageUrl,
  //     });

  //     setShowEditModal(false);
  //     // Reload l·∫°i userInfo n·∫øu mu·ªën c·∫≠p nh·∫≠t giao di·ªán ngay
  //     const response = await axiosInstance.get(`/User/${userId}`);
  //     setUserInfo(response.data);
  //     // Reload lai Header
  //     updateAvatarVersion();
  //   } catch (error) {
  //     alert("C√≥ l·ªói khi l∆∞u th√¥ng tin ho·∫∑c upload ·∫£nh!");
  //     console.error(error);
  //   }
  // };

  const handleSaveProfile = async () => {
    try {
      let finalImageUrl = ""; // gi·ªØ nguy√™n ·∫£nh c≈©
      // ‚úÖ N·∫øu user ƒë√£ c√≥ ·∫£nh tr∆∞·ªõc ƒë√≥ ‚Üí t√°ch l·∫•y t√™n file t·ª´ URL
      if (userInfo.imageUrl && userInfo.imageUrl.includes("/")) {
        finalImageUrl = userInfo.imageUrl.split("/").pop(); // l·∫•y abc.png t·ª´ http://localhost:.../abc.png
      } else {
        finalImageUrl = userInfo.imageUrl; // trong tr∆∞·ªùng h·ª£p ƒë√£ l√† t√™n file
      }

      // N·∫øu c√≥ ·∫£nh m·ªõi ‚Üí upload tr∆∞·ªõc
      if (selectedImage) {
        const formData = new FormData();
        formData.append("file", selectedImage);

        const uploadRes = await axios.post(
          `${import.meta.env.VITE_API_BASE_URL}/Upload/image`,
          formData,
          {
            headers: {
              Authorization: `Bearer ${localStorage.getItem("token")}`,
              "Content-Type": "multipart/form-data",
            },
          }
        );

        if (uploadRes.data.success) {
          finalImageUrl = uploadRes.data.fileName; // l·∫•y t√™n file l√†m imageUrl
        } else {
          throw new Error("Upload ·∫£nh th·∫•t b·∫°i.");
        }
      }

      // G·ª≠i PATCH c·∫≠p nh·∫≠t th√¥ng tin
      await axios.patch(
        `${import.meta.env.VITE_API_BASE_URL}/User/profile/${userId}`,
        {
          ...formData, // d·ªØ li·ªáu ng∆∞·ªùi d√πng: t√™n, email, v.v.
          imageUrl: finalImageUrl, // ·∫£nh m·ªõi ho·∫∑c c≈©
        },
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        }
      );

      // Sau khi th√†nh c√¥ng
      setShowEditModal(false);

      // C·∫≠p nh·∫≠t l·∫°i UI
      const res = await axios.get(
        `${import.meta.env.VITE_API_BASE_URL}/User/${userId}`,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        }
      );
      setUserInfo(res.data);
      updateAvatarVersion();
      toast.success("C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng");
    } catch (err) {
      alert("L·ªói khi l∆∞u h·ªì s∆°.");
    }
  };

  const handleInputChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const handleChangePassword = async () => {
    try {
      // L·∫•y userId t·ª´ localStorage ho·∫∑c state
      const userId = localStorage.getItem("userId");

      // L·∫•y d·ªØ li·ªáu t·ª´ form ƒë·ªïi m·∫≠t kh·∫©u
      // Gi·∫£ s·ª≠ b·∫°n c√≥ 3 state: currentPassword, newPassword, confirmNewPassword
      const payload = {
        currentPassword, // m·∫≠t kh·∫©u hi·ªán t·∫°i
        newPassword, // m·∫≠t kh·∫©u m·ªõi
        confirmNewPassword, // x√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi
      };

      const res = await axiosInstance.patch(
        `/User/change-password/${userId}`,
        payload
      );

      if (res?.data?.message) {
        if (res?.data?.success === false) {
          toast.error(res?.data?.message);
          return;
        }
        toast.success(res?.data?.message);
      }

      // alert("ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
      setShowPasswordModal(false);
      setCurrentPassword("");
      setNewPassword("");
      setConfirmNewPassword("");
    } catch (error) {
      toast.error(
        "ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i: " +
          (error.response?.data?.message || error.message)
      );
    }
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setSelectedImage(file);
      setPreviewImage(URL.createObjectURL(file));
    }
  };

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const response = await axiosInstance.get(`/User/${userId}`);
        setUserInfo(response.data);
      } catch (error) {}
    };
    fetchUserData();
  }, [userId]);

  if (!userInfo) return <div>Loading...</div>;

  // console.log("Image URL:", userInfo.imageUrl);

  return (
    <div className="admin-profile-container">
      {/* Modern Header */}
      <div className="admin-profile-header">
        <div className="admin-profile-header-bg"></div>
        <div className="admin-profile-header-content">
          <div className="admin-profile-avatar-section">
            <div className="admin-profile-avatar">
              <img src={userInfo.imageUrl} alt="Avatar" />
              <button
                className="admin-profile-avatar-edit"
                onClick={
                  // Trigger click v√†o input type="file"
                  () => fileInputRef.current.click()
                }
              >
                <FaCamera />
              </button>
              {/* Input ·∫©n ƒë·ªÉ ch·ªçn file */}
              <input
                type="file"
                accept="image/*"
                style={{ display: "none" }}
                ref={fileInputRef}
                onChange={handleChangeImage}
              />
            </div>
            <div className="admin-profile-info">
              <h2 className="admin-profile-name">{userInfo.name}</h2>
              <p className="admin-profile-position">
                <FaUserTie className="me-2" />
                {adminProfile.position} - {adminProfile.department}
              </p>
              {/* <p className="admin-profile-id">
                <FaIdCard className="me-2" />
                ID: {adminProfile.employeeId}
              </p> */}
            </div>
          </div>
          <div className="admin-profile-actions">
            <button
              className="admin-profile-btn admin-profile-btn-primary"
              onClick={() => setShowEditModal(true)}
            >
              <FaEdit className="me-2" />
              Ch·ªânh s·ª≠a h·ªì s∆°
            </button>
            <button
              className="admin-profile-btn admin-profile-btn-secondary"
              onClick={() => setShowPasswordModal(true)}
            >
              <FaKey className="me-2" />
              ƒê·ªïi m·∫≠t kh·∫©u
            </button>
          </div>
        </div>
      </div>

      {/* Personal Information - moved up here */}
      <div
        className="admin-profile-section"
        style={{ width: "100%", margin: "32px 0 0 0" }}
      >
        <div className="admin-profile-section-header">
          <h5 className="admin-profile-section-title">
            <FaUser className="me-2" />
            Th√¥ng tin c√° nh√¢n
          </h5>
        </div>
        <div className="admin-profile-info-grid">
          <div className="admin-profile-info-item">
            <label className="admin-profile-info-label">
              <FaUser className="me-2" />
              H·ªç v√† t√™n
            </label>
            <div className="admin-profile-info-value">{userInfo.name}</div>
          </div>
          <div className="admin-profile-info-item">
            <label className="admin-profile-info-label">
              <FaCalendarAlt className="me-2" />
              Ng√†y sinh
            </label>
            <div className="admin-profile-info-value">
              {userInfo.dateOfBirth.split("-").reverse().join("/")}
            </div>
          </div>
          <div className="admin-profile-info-item">
            <label className="admin-profile-info-label">
              <FaUser className="me-2" />
              Gi·ªõi t√≠nh
            </label>
            <div className="admin-profile-info-value">{userInfo.gender}</div>
          </div>
          <div className="admin-profile-info-item">
            <label className="admin-profile-info-label">
              <FaUserTie className="me-2" />
              Ch·ª©c v·ª•
            </label>
            <div className="admin-profile-info-value">
              {adminProfile.position}
            </div>
          </div>
          <div className="admin-profile-info-item">
            <label className="admin-profile-info-label">
              <FaEnvelope className="me-2" />
              Email
            </label>
            <div className="admin-profile-info-value">{userInfo.email}</div>
          </div>
          <div className="admin-profile-info-item">
            <label className="admin-profile-info-label">
              <FaPhone className="me-2" />
              S·ªë ƒëi·ªán tho·∫°i
            </label>
            <div className="admin-profile-info-value">{userInfo.phone}</div>
          </div>
          <div className="admin-profile-info-item full-width">
            <label className="admin-profile-info-label">
              <FaMapMarkerAlt className="me-2" />
              ƒê·ªãa ch·ªâ
            </label>
            <div className="admin-profile-info-value">{userInfo.address}</div>
          </div>
        </div>
      </div>

      {/* Profile Content */}
      {/* ƒê√£ xo√° sidebar v√† c√°c ph·∫ßn kh√¥ng c·∫ßn thi·∫øt */}

      {/* Edit Profile Modal */}
      <Modal
        show={showEditModal}
        onHide={() => setShowEditModal(false)}
        size="lg"
        className="admin-profile-modal"
      >
        <Modal.Header closeButton className="admin-modal-header">
          <Modal.Title>
            <FaEdit className="me-2" />
            Ch·ªânh s·ª≠a h·ªì s∆°
          </Modal.Title>
        </Modal.Header>
        <Modal.Body className="admin-modal-body">
          <Tabs
            activeKey={activeTab}
            onSelect={(k) => setActiveTab(k)}
            className="admin-profile-tabs"
          >
            <Tab eventKey="personal" title="Th√¥ng tin c√° nh√¢n">
              <div className="admin-profile-form-section">
                <Row>
                  <Col md={6}>
                    <Form.Group className="admin-form-group">
                      <Form.Label className="admin-form-label">
                        <FaUser className="me-2" />
                        H·ªç v√† t√™n
                      </Form.Label>
                      <Form.Control
                        type="text"
                        name="name"
                        value={formData.name}
                        onChange={handleInputChange}
                        className="admin-form-control"
                      />
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group className="admin-form-group">
                      <Form.Label className="admin-form-label">
                        <FaEnvelope className="me-2" />
                        Email
                      </Form.Label>
                      <Form.Control
                        type="email"
                        name="email"
                        value={formData.email}
                        onChange={handleInputChange}
                        className="admin-form-control"
                      />
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group className="admin-form-group">
                      <Form.Label className="admin-form-label">
                        <FaPhone className="me-2" />
                        S·ªë ƒëi·ªán tho·∫°i
                      </Form.Label>
                      <Form.Control
                        type="tel"
                        name="phone"
                        value={formData.phone}
                        onChange={handleInputChange}
                        className="admin-form-control"
                      />
                    </Form.Group>
                  </Col>

                  <Col md={12}>
                    <Form.Group className="admin-form-group">
                      <Form.Label className="admin-form-label">
                        <FaMapMarkerAlt className="me-2" />
                        ƒê·ªãa ch·ªâ
                      </Form.Label>
                      <Form.Control
                        as="textarea"
                        rows={3}
                        name="address"
                        value={formData.address}
                        onChange={handleInputChange}
                        className="admin-form-control"
                      />
                    </Form.Group>
                  </Col>
                  <Col md={12} className="mb-3">
                    <Form.Group className="admin-form-group">
                      <Form.Label className="admin-form-label">
                        <FaCamera className="me-2" />
                        ·∫¢nh ƒë·∫°i di·ªán
                      </Form.Label>
                      <div
                        style={{
                          display: "flex",
                          alignItems: "center",
                          gap: 16,
                        }}
                      >
                        <img
                          src={previewImage || "/uploads/default.jpg"}
                          alt="Preview"
                          style={{
                            width: 64,
                            height: 64,
                            borderRadius: "50%",
                            objectFit: "cover",
                            border: "2px solid #eee",
                            marginRight: 12,
                          }}
                        />
                        <Form.Control
                          type="file"
                          accept="image/*"
                          onChange={handleImageChange}
                          style={{ maxWidth: 220 }}
                        />
                      </div>
                    </Form.Group>
                  </Col>
                </Row>
              </div>
            </Tab>
          </Tabs>
        </Modal.Body>
        <Modal.Footer className="admin-modal-footer">
          <Button variant="secondary" onClick={() => setShowEditModal(false)}>
            H·ªßy
          </Button>
          <Button
            className="admin-profile-btn-primary"
            onClick={handleSaveProfile}
          >
            <FaSave className="me-2" />
            L∆∞u thay ƒë·ªïi
          </Button>
        </Modal.Footer>
      </Modal>

      {/* Change Password Modal */}
      <Modal
        show={showPasswordModal}
        onHide={() => setShowPasswordModal(false)}
        className="admin-profile-modal"
      >
        <Modal.Header closeButton className="admin-modal-header">
          <Modal.Title>
            <FaKey className="me-2" />
            ƒê·ªïi m·∫≠t kh·∫©u
          </Modal.Title>
        </Modal.Header>
        <Modal.Body className="admin-modal-body">
          <Form>
            <Form.Group className="admin-form-group">
              <Form.Label className="admin-form-label">
                M·∫≠t kh·∫©u hi·ªán t·∫°i
              </Form.Label>
              <div className="admin-password-input-group">
                <Form.Control
                  type={showPasswordCurrent ? "text" : "password"}
                  placeholder="Nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i"
                  className="admin-form-control"
                  value={currentPassword}
                  onChange={(e) => setCurrentPassword(e.target.value)}
                />
                <button
                  type="button"
                  className="admin-password-toggle"
                  onClick={() => setShowPasswordCurrent(!showPasswordCurrent)}
                >
                  {showPasswordCurrent ? <FaEyeSlash /> : <FaEye />}
                </button>
              </div>
            </Form.Group>
            <Form.Group className="admin-form-group">
              <Form.Label className="admin-form-label">M·∫≠t kh·∫©u m·ªõi</Form.Label>
              <div className="admin-password-input-group">
                <Form.Control
                  type={showPasswordNew ? "text" : "password"}
                  placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
                  className="admin-form-control"
                  value={newPassword}
                  onChange={(e) => setNewPassword(e.target.value)}
                />
                <button
                  type="button"
                  className="admin-password-toggle"
                  onClick={() => setShowPasswordNew(!showPasswordNew)}
                >
                  {showPasswordNew ? <FaEyeSlash /> : <FaEye />}
                </button>
              </div>
            </Form.Group>
            <Form.Group className="admin-form-group">
              <Form.Label className="admin-form-label">
                X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi
              </Form.Label>
              <div className="admin-password-input-group">
                <Form.Control
                  type={showPasswordConfirm ? "text" : "password"}
                  placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi"
                  className="admin-form-control"
                  value={confirmNewPassword}
                  onChange={(e) => setConfirmNewPassword(e.target.value)}
                />
                <button
                  type="button"
                  className="admin-password-toggle"
                  onClick={() => setShowPasswordConfirm(!showPasswordConfirm)}
                >
                  {showPasswordConfirm ? <FaEyeSlash /> : <FaEye />}
                </button>
              </div>
            </Form.Group>
            {/* <div className="admin-password-requirements">
              <h6>Y√™u c·∫ßu m·∫≠t kh·∫©u:</h6>
              <ul>
                <li>√çt nh·∫•t 8 k√Ω t·ª±</li>
                <li>Ch·ª©a ch·ªØ hoa v√† ch·ªØ th∆∞·ªùng</li>
                <li>Ch·ª©a √≠t nh·∫•t 1 s·ªë</li>
                <li>Ch·ª©a √≠t nh·∫•t 1 k√Ω t·ª± ƒë·∫∑c bi·ªát</li>
              </ul>
            </div> */}
          </Form>
        </Modal.Body>
        <Modal.Footer className="admin-modal-footer">
          <Button
            variant="secondary"
            onClick={() => setShowPasswordModal(false)}
          >
            H·ªßy
          </Button>
          <Button
            className="admin-profile-btn-primary"
            onClick={handleChangePassword}
          >
            <FaKey className="me-2" />
            ƒê·ªïi m·∫≠t kh·∫©u
          </Button>
        </Modal.Footer>
      </Modal>
    </div>
  );
};

export default Profile;
